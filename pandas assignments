{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "d384a480-2ebe-4112-bc49-8cee193a7cbf",
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'pandas'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[10], line 3\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;241m1.\u001b[39m\u001b[38;5;66;03m# Load the dataset using pd.read_csv().\u001b[39;00m\n\u001b[1;32m----> 3\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21;01mpandas\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mas\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21;01mpd\u001b[39;00m\n\u001b[0;32m      5\u001b[0m netflix_df \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mread_csv\n\u001b[0;32m      8\u001b[0m \u001b[38;5;241m2.\u001b[39m  \u001b[38;5;66;03m# Display the first 5 and last 5 rows.\u001b[39;00m\n",
      "\u001b[1;31mModuleNotFoundError\u001b[0m: No module named 'pandas'"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "\n",
    "1.# Load the dataset using pd.read_csv().\n",
    "\n",
    "import pandas as pd\n",
    "\n",
    "netflix_df = pd.read_csv\n",
    "\n",
    "\n",
    "2.  # Display the first 5 and last 5 rows.\n",
    "\n",
    "print(netflix_df.head())\n",
    "print(netflix_df.tail())\n",
    "\n",
    "\n",
    "3.# How many rows and columns are there in the dataset?\n",
    "\n",
    "print(\"Number of rows and columns:\", netflix_df.shape)\n",
    "print(\"Number of columns:\", len(netflix_df.columns))\n",
    "\n",
    "\n",
    "4.# Identify the number of unique countries where content is produced.\n",
    "\n",
    "unique_countries = netflix_df['country'].nunique()\n",
    "print(\"Number of unique countries:\", unique_countries)\n",
    "\n",
    "\n",
    "5.# Display all records where the type is 'TV Show'.\n",
    "\n",
    "tv_shows = netflix_df[netflix_df['type'] == 'TV Show']\n",
    "print(tv_shows)\n",
    "\n",
    "\n",
    "6.# Convert the date_added column to datetime and extract the year and month.\n",
    "\n",
    "netflix_df['date_added'] = pd.to_datetime(netflix_df['date_added'])\n",
    "netflix_df['year_added'] = netflix_df['date_added'].dt.year\n",
    "netflix_df['month_added'] = netflix_df['date_added'].dt.month\n",
    "\n",
    "\n",
    "7.# How many movies were released in 2019?\n",
    "\n",
    "movies_2019 = netflix_df[(netflix_df['type'] == 'Movie') & (netflix_df['release_year'] == 2019)]\n",
    "print(\"Number of movies released in 2019:\", len(movies_2019))\n",
    "\n",
    "\n",
    "8.# Group by rating and show the count of each category.\n",
    "\n",
    "rating_counts = netflix_df['rating'].value_counts()\n",
    "print(rating_counts)\n",
    "\n",
    "\n",
    "1.# Load and display the top 10 rows.\n",
    "\n",
    "import pandas as pd\n",
    "\n",
    "population_df = pd.read_csv('world_population.csv')\n",
    "print(population_df.head(10))\n",
    "\n",
    "\n",
    "2.# Check for null values and handle them appropriately.\n",
    "\n",
    "null_values = population_df.isnull().sum()\n",
    "print(null_values)\n",
    "# Handle null values based on the specific column and data type\n",
    "\n",
    "\n",
    "3.# What is the population of the top 5 most populous countries?\n",
    "\n",
    "top_5_countries = population_df.nlargest(5, 'population')\n",
    "print(top_5_countries[['country', 'population']])\n",
    "\n",
    "\n",
    "4.# Create a new column showing GDP per capita (GDP / Population).\n",
    "\n",
    "population_df['gdp_per_capita'] = population_df['gdp'] / population_df['population']\n",
    "\n",
    "\n",
    "5.# Filter out countries with population > 100 million and area < 500,000 sq km\n",
    "\n",
    "filtered_countries = population_df[(population_df['population'] > 100000000) & (population_df['area'] < 500000)]\n",
    "print(filtered_countries)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "4e5772ef-6e94-490b-a1a4-5709ad7c114c",
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'pandas'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[9], line 3\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;241m1.\u001b[39m\u001b[38;5;66;03m# Load the matches.csv file.\u001b[39;00m\n\u001b[1;32m----> 3\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21;01mpandas\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mas\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21;01mpd\u001b[39;00m\n\u001b[0;32m      5\u001b[0m matches_df \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mread_csv(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmatches.csv\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[0;32m      8\u001b[0m \u001b[38;5;241m2.\u001b[39m \u001b[38;5;66;03m#Find out the most successful team (based on the number of wins).\u001b[39;00m\n",
      "\u001b[1;31mModuleNotFoundError\u001b[0m: No module named 'pandas'"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "1.# Load the matches.csv file.\n",
    "\n",
    "import pandas as pd\n",
    "\n",
    "matches_df = pd.read_csv('matches.csv')\n",
    "\n",
    "\n",
    "2. #Find out the most successful team (based on the number of wins).\n",
    "\n",
    "team_wins = matches_df['winner'].value_counts()\n",
    "most_successful_team = team_wins.idxmax()\n",
    "print(\"Most successful team:\", most_successful_team)\n",
    "\n",
    "\n",
    "3.# Count total matches played each season.\n",
    "\n",
    "season_matches = matches_df['season'].value_counts().sort_index()\n",
    "print(season_matches)\n",
    "\n",
    "\n",
    "4.# Display the top 5 players who won the most \"Player of the Match\" awards.\n",
    "\n",
    "player_of_match = matches_df['player_of_match'].value_counts().head(5)\n",
    "print(player_of_match)\n",
    "\n",
    "\n",
    "5.# Merge matches.csv and deliveries.csv on match_id and perform analysis.\n",
    "\n",
    "deliveries_df = pd.read_csv('deliveries.csv')\n",
    "merged_df = pd.merge(deliveries_df, matches_df, on='match_id')\n",
    "# Perform analysis on the merged dataframe\n",
    "print(merged_df.head())\n",
    "1.# Display average marks in math, reading, and writing.\n",
    "\n",
    "import pandas as pd\n",
    "\n",
    "students_df = pd.read_csv('students_performance.csv')\n",
    "average_math = students_df['math_score'].mean()\n",
    "average_reading = students_df['reading_score'].mean()\n",
    "average_writing = students_df['writing_score'].mean()\n",
    "print(\"Average Math Score:\", average_math)\n",
    "print(\"Average Reading Score:\", average_reading)\n",
    "print(\"Average Writing Score:\", average_writing)\n",
    "\n",
    "\n",
    "2.# Who performed better in writing â€“ males or females?\n",
    "\n",
    "male_writing_avg = students_df[students_df['gender'] == 'male']['writing_score'].mean()\n",
    "female_writing_avg = students_df[students_df['gender'] == 'female']['writing_score'].mean()\n",
    "if male_writing_avg > female_writing_avg:\n",
    "    print(\"Males performed better in writing.\")\n",
    "else:\n",
    "    print(\"Females performed better in writing.\")\n",
    "\n",
    "\n",
    "3.# Add a new column for total score and percentage.\n",
    "\n",
    "students_df['total_score'] = students_df['math_score'] + students_df['reading_score'] + students_df['writing_score']\n",
    "students_df['percentage'] = (students_df['total_score'] / 300) * 100\n",
    "\n",
    "\n",
    "4. # Plot a bar chart showing average scores grouped by parental level of education.\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "average_scores = students_df.groupby('parental_level_of_education')[['math_score', 'reading_score', 'writing_score']].mean()\n",
    "average_scores.plot(kind='bar')\n",
    "plt.title('Average Scores by Parental Level of Education')\n",
    "plt.xlabel('Parental Level of Education')\n",
    "plt.ylabel('Average Score')\n",
    "plt.show()\n",
    "\n",
    "\n",
    "5.# Find students who scored above 90% in all subjects.\n",
    "\n",
    "high_achievers = students_df[(students_df['math_score'] > 90) & (students_df['reading_score'] > 90) & (students_df['writing_score'] > 90)]\n",
    "print(high_achievers)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5049fee3-08f7-464b-b772-e220b681df2d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c0923a61-9b3e-47bc-8ebd-88d0a3f8d319",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "33b8cccc-a634-4cd8-af0c-f41fcabba535",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0929e003-c856-40c7-b016-069a2a2d5444",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "615e8866-54a7-4ef8-b096-0ca12ce44fbe",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:notebook]",
   "language": "python",
   "name": "conda-env-notebook-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.23"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
